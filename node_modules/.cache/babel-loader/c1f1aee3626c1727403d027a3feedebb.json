{"ast":null,"code":"// AuthenticationService.jsx\n// following https://www.springboottutorial.com/spring-boot-react-full-stack-with-spring-security-basic-and-jwt-authentication\nimport axios from 'axios';\nimport { config } from './Constants';\nvar url = config.url.API_URL;\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'; // export const USER_FIRST_AND_LAST_SESSION_ATTIRBUTE = 'user'\n\nclass AuthenticationService {\n  creatAccount(newAccount) {\n    console.log(\"create account\");\n    return axios.post(`${url}/new/user`, newAccount);\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    console.log(username);\n    return axios.post(`${url}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    console.log(this.createJWTToken(token)); // this.setupAxiosInterceptors(this.createJWTToken(token))\n\n    localStorage.setItem(\"JWT\", this.createJWTToken(token));\n    console.log(\"stored \", this.createJWTToken(token));\n    console.log(\"and it's right here \", localStorage.getItem(\"JWT\"));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  } // setupAxiosInterceptors(token) {\n  //     axios.interceptors.request.use(\n  //         (config) => {\n  //             if (this.isUserLoggedIn()) {\n  //                 config.headers.authorization = token\n  //                 console.log(config.headers.authorization)\n  //             }\n  //             return config\n  //         }\n  //     )\n  // }\n\n\n  getLoggedInUsersNameFirstLast() {\n    return axios.get(`${url}/users/name`, {\n      headers: {\n        'Authorization': localStorage.getItem(\"JWT\")\n      }\n    });\n  } // registerFirstAndLastName(name) {\n  //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, name)\n  // }\n  // getLoggedInUsersNameFirstLastFromStored() {\n  //     let user = sessionStorage.getItem(USER_FIRST_AND_LAST_SESSION_ATTIRBUTE)\n  //     if (user === null) return ''\n  //     return user\n  // }\n\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/garrettchristian/DocumentsDesktop/csSeniorYear/isTHEA/budget_estimate_front_end/src/service/AuthenticationService.jsx"],"names":["axios","config","url","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","creatAccount","newAccount","console","log","post","executeJwtAuthenticationService","username","password","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","createJWTToken","localStorage","getItem","logout","removeItem","isUserLoggedIn","user","getLoggedInUserName","getLoggedInUsersNameFirstLast","get","headers"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA,IAAIC,GAAG,GAAGD,MAAM,CAACC,GAAP,CAAWC,OAArB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC,C,CACP;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,YAAY,CAACC,UAAD,EAAa;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAOT,KAAK,CAACU,IAAN,CAAY,GAAER,GAAI,WAAlB,EAA8BK,UAA9B,CAAP;AACH;;AAEDI,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChDL,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,WAAOZ,KAAK,CAACU,IAAN,CAAY,GAAER,GAAI,eAAlB,EAAkC;AACrCU,MAAAA,QADqC;AAErCC,MAAAA;AAFqC,KAAlC,CAAP;AAIH;;AAEDC,EAAAA,6BAA6B,CAACF,QAAD,EAAWG,KAAX,EAAkB;AAC3CC,IAAAA,cAAc,CAACC,OAAf,CAAuBb,gCAAvB,EAAyDQ,QAAzD;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKS,cAAL,CAAoBH,KAApB,CAAZ,EAF2C,CAG3C;;AACAI,IAAAA,YAAY,CAACF,OAAb,CAAqB,KAArB,EAA4B,KAAKC,cAAL,CAAoBH,KAApB,CAA5B;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKS,cAAL,CAAoBH,KAApB,CAAvB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCU,YAAY,CAACC,OAAb,CAAqB,KAArB,CAApC;AAEH;;AAEDF,EAAAA,cAAc,CAACH,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACLL,IAAAA,cAAc,CAACM,UAAf,CAA0BlB,gCAA1B;AACH;;AAEDmB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGR,cAAc,CAACI,OAAf,CAAuBhB,gCAAvB,CAAX;AACA,QAAIoB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDC,EAAAA,mBAAmB,GAAG;AAClB,QAAID,IAAI,GAAGR,cAAc,CAACI,OAAf,CAAuBhB,gCAAvB,CAAX;AACA,QAAIoB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH,GA3CuB,CA6CxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,EAAAA,6BAA6B,GAAG;AAC5B,WAAO1B,KAAK,CAAC2B,GAAN,CAAW,GAAEzB,GAAI,aAAjB,EAA+B;AAClC0B,MAAAA,OAAO,EAAE;AACP,yBAAkBT,YAAY,CAACC,OAAb,CAAqB,KAArB;AADX;AADyB,KAA/B,CAAP;AAKH,GA/DuB,CAmExB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AA3EwB;;AA+E5B,eAAe,IAAIf,qBAAJ,EAAf","sourcesContent":["// AuthenticationService.jsx\n// following https://www.springboottutorial.com/spring-boot-react-full-stack-with-spring-security-basic-and-jwt-authentication\nimport axios from 'axios'\nimport { config } from './Constants'\n\nvar url = config.url.API_URL\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n// export const USER_FIRST_AND_LAST_SESSION_ATTIRBUTE = 'user'\n\nclass AuthenticationService {\n\n    creatAccount(newAccount) {\n        console.log(\"create account\")\n        return axios.post(`${url}/new/user`, newAccount)\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        console.log(username);\n        return axios.post(`${url}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        console.log(this.createJWTToken(token))\n        // this.setupAxiosInterceptors(this.createJWTToken(token))\n        localStorage.setItem(\"JWT\", this.createJWTToken(token))\n        console.log(\"stored \", this.createJWTToken(token))\n        console.log(\"and it's right here \", localStorage.getItem(\"JWT\"))\n\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    // setupAxiosInterceptors(token) {\n    //     axios.interceptors.request.use(\n    //         (config) => {\n    //             if (this.isUserLoggedIn()) {\n    //                 config.headers.authorization = token\n    //                 console.log(config.headers.authorization)\n    //             }\n    //             return config\n    //         }\n    //     )\n    // }\n\n    getLoggedInUsersNameFirstLast() {\n        return axios.get(`${url}/users/name`, {\n            headers: {\n              'Authorization':  localStorage.getItem(\"JWT\")\n            }\n          })\n    }\n\n    \n\n    // registerFirstAndLastName(name) {\n    //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, name)\n    // }\n\n    // getLoggedInUsersNameFirstLastFromStored() {\n    //     let user = sessionStorage.getItem(USER_FIRST_AND_LAST_SESSION_ATTIRBUTE)\n    //     if (user === null) return ''\n    //     return user\n    // }\n\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}