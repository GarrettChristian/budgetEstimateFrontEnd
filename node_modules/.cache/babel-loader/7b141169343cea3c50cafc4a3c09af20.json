{"ast":null,"code":"// AuthenticationService.jsx\n// following https://www.springboottutorial.com/spring-boot-react-full-stack-with-spring-security-basic-and-jwt-authentication\nimport axios from 'axios';\nimport { config } from './Constants';\nvar url = config.url.API_URL; // export const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n  creatAccount(newAccount) {\n    console.log(\"create account\");\n    return axios.post(`${url}/new/user`, newAccount);\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    console.log(username);\n    return axios.post(`${url}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/garrettchristian/DocumentsDesktop/csSeniorYear/isTHEA/budget_estimate_front_end/src/service/AuthenticationService.jsx"],"names":["axios","config","url","API_URL","AuthenticationService","creatAccount","newAccount","console","log","post","executeJwtAuthenticationService","username","password","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","USER_NAME_SESSION_ATTRIBUTE_NAME","setupAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","headers","authorization"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA,IAAIC,GAAG,GAAGD,MAAM,CAACC,GAAP,CAAWC,OAArB,C,CAEA;;AAEA,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,YAAY,CAACC,UAAD,EAAa;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAOR,KAAK,CAACS,IAAN,CAAY,GAAEP,GAAI,WAAlB,EAA8BI,UAA9B,CAAP;AACH;;AAEDI,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChDL,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,WAAOX,KAAK,CAACS,IAAN,CAAY,GAAEP,GAAI,eAAlB,EAAkC;AACrCS,MAAAA,QADqC;AAErCC,MAAAA;AAFqC,KAAlC,CAAP;AAIH;;AAEDC,EAAAA,6BAA6B,CAACF,QAAD,EAAWG,KAAX,EAAkB;AAC3CC,IAAAA,cAAc,CAACC,OAAf,CAAuBC,gCAAvB,EAAyDN,QAAzD;AACA,SAAKO,sBAAL,CAA4B,KAAKC,cAAL,CAAoBL,KAApB,CAA5B;AACH;;AAEDK,EAAAA,cAAc,CAACL,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACLL,IAAAA,cAAc,CAACM,UAAf,CAA0BJ,gCAA1B;AACH;;AAEDK,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGR,cAAc,CAACS,OAAf,CAAuBP,gCAAvB,CAAX;AACA,QAAIM,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGR,cAAc,CAACS,OAAf,CAAuBP,gCAAvB,CAAX;AACA,QAAIM,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACJ,KAAD,EAAQ;AAC1Bd,IAAAA,KAAK,CAAC0B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACK3B,MAAD,IAAY;AACR,UAAI,KAAKqB,cAAL,EAAJ,EAA2B;AACvBrB,QAAAA,MAAM,CAAC4B,OAAP,CAAeC,aAAf,GAA+BhB,KAA/B;AACH;;AACD,aAAOb,MAAP;AACH,KANL;AAQH;;AAjDuB;;AAsD5B,eAAe,IAAIG,qBAAJ,EAAf","sourcesContent":["// AuthenticationService.jsx\n// following https://www.springboottutorial.com/spring-boot-react-full-stack-with-spring-security-basic-and-jwt-authentication\nimport axios from 'axios'\nimport { config } from './Constants'\n\nvar url = config.url.API_URL\n\n// export const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    creatAccount(newAccount) {\n        console.log(\"create account\")\n        return axios.post(`${url}/new/user`, newAccount)\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        console.log(username);\n        return axios.post(`${url}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n\n    getLoggedInUserName\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}