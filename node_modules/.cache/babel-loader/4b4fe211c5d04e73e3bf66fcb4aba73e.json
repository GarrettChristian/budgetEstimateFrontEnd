{"ast":null,"code":"// AuthenticationService.jsx\n// following https://www.springboottutorial.com/spring-boot-react-full-stack-with-spring-security-basic-and-jwt-authentication\nimport axios from 'axios';\nimport { config } from './Constants';\nvar url = config.url.API_URL;\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\nexport const USER_FIRST_AND_LAST_SESSION_ATTIRBUTE = 'user';\n\nclass AuthenticationService {\n  creatAccount(newAccount) {\n    console.log(\"create account\");\n    return axios.post(`${url}/new/user`, newAccount);\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    console.log(username);\n    return axios.post(`${url}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n  getLoggedInUsersNameFirstLast() {\n    return axios.get(`${url}/users/name`);\n  }\n\n  registerFirstAndLastName(name) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, name);\n  }\n\n  getLoggedInUsersNameFirstLastFromStored() {\n    let user = sessionStorage.getItem(USER_FIRST_AND_LAST_SESSION_ATTIRBUTE);\n    if (user === null) return '';\n    return user;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/garrettchristian/DocumentsDesktop/csSeniorYear/isTHEA/budget_estimate_front_end/src/service/AuthenticationService.jsx"],"names":["axios","config","url","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","USER_FIRST_AND_LAST_SESSION_ATTIRBUTE","AuthenticationService","creatAccount","newAccount","console","log","post","executeJwtAuthenticationService","username","password","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","headers","authorization","getLoggedInUsersNameFirstLast","get","registerFirstAndLastName","name","getLoggedInUsersNameFirstLastFromStored"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA,IAAIC,GAAG,GAAGD,MAAM,CAACC,GAAP,CAAWC,OAArB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;AACP,OAAO,MAAMC,qCAAqC,GAAG,MAA9C;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,YAAY,CAACC,UAAD,EAAa;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAOV,KAAK,CAACW,IAAN,CAAY,GAAET,GAAI,WAAlB,EAA8BM,UAA9B,CAAP;AACH;;AAEDI,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChDL,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,WAAOb,KAAK,CAACW,IAAN,CAAY,GAAET,GAAI,eAAlB,EAAkC;AACrCW,MAAAA,QADqC;AAErCC,MAAAA;AAFqC,KAAlC,CAAP;AAIH;;AAEDC,EAAAA,6BAA6B,CAACF,QAAD,EAAWG,KAAX,EAAkB;AAC3CC,IAAAA,cAAc,CAACC,OAAf,CAAuBd,gCAAvB,EAAyDS,QAAzD;AACA,SAAKM,sBAAL,CAA4B,KAAKC,cAAL,CAAoBJ,KAApB,CAA5B;AACH;;AAEDI,EAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDK,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0BlB,gCAA1B;AACH;;AAEDmB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBrB,gCAAvB,CAAX;AACA,QAAIoB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBrB,gCAAvB,CAAX;AACA,QAAIoB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACH,KAAD,EAAQ;AAC1BhB,IAAAA,KAAK,CAAC2B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACK5B,MAAD,IAAY;AACR,UAAI,KAAKsB,cAAL,EAAJ,EAA2B;AACvBtB,QAAAA,MAAM,CAAC6B,OAAP,CAAeC,aAAf,GAA+Bf,KAA/B;AACH;;AACD,aAAOf,MAAP;AACH,KANL;AAQH;;AAED+B,EAAAA,6BAA6B,GAAG;AAC5B,WAAOhC,KAAK,CAACiC,GAAN,CAAW,GAAE/B,GAAI,aAAjB,CAAP;AACH;;AAEDgC,EAAAA,wBAAwB,CAACC,IAAD,EAAO;AAC3BlB,IAAAA,cAAc,CAACC,OAAf,CAAuBd,gCAAvB,EAAyD+B,IAAzD;AACH;;AAEDC,EAAAA,uCAAuC,GAAG;AACtC,QAAIZ,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBpB,qCAAvB,CAAX;AACA,QAAImB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AA/DuB;;AAmE5B,eAAe,IAAIlB,qBAAJ,EAAf","sourcesContent":["// AuthenticationService.jsx\n// following https://www.springboottutorial.com/spring-boot-react-full-stack-with-spring-security-basic-and-jwt-authentication\nimport axios from 'axios'\nimport { config } from './Constants'\n\nvar url = config.url.API_URL\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\nexport const USER_FIRST_AND_LAST_SESSION_ATTIRBUTE = 'user'\n\nclass AuthenticationService {\n\n    creatAccount(newAccount) {\n        console.log(\"create account\")\n        return axios.post(`${url}/new/user`, newAccount)\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        console.log(username);\n        return axios.post(`${url}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n\n    getLoggedInUsersNameFirstLast() {\n        return axios.get(`${url}/users/name`, )\n    }\n\n    registerFirstAndLastName(name) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, name)\n    }\n\n    getLoggedInUsersNameFirstLastFromStored() {\n        let user = sessionStorage.getItem(USER_FIRST_AND_LAST_SESSION_ATTIRBUTE)\n        if (user === null) return ''\n        return user\n    }\n\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}