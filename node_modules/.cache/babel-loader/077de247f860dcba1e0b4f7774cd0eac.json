{"ast":null,"code":"// AuthenticationService.jsx\n// following https://www.springboottutorial.com/spring-boot-react-full-stack-with-spring-security-basic-and-jwt-authentication\nimport axios from 'axios';\nimport { config } from './Constants';\nvar url = config.url.API_URL;\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'; // export const USER_FIRST_AND_LAST_SESSION_ATTIRBUTE = 'user'\n\nclass AuthenticationService {\n  constructor() {\n    this.getJwt = async () => {\n      const {\n        data\n      } = await axios.get(`/jwt`);\n      setJwt(data.token);\n    };\n  }\n\n  creatAccount(newAccount) {\n    console.log(\"create account\");\n    return axios.post(`${url}/new/user`, newAccount);\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    console.log(username);\n    return axios.post(`${url}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    console.log(this.createJWTToken(token));\n    this.setupAxiosInterceptors(username, this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    console.log(\"here?? \", user);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(username, token) {\n    // const token = jsonwebtoken.sign({ user: username }, jwttoken);\n    res.cookie('token', token, {\n      httpOnly: true\n    });\n    res.json({\n      token\n    });\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n        console.log(config.headers.authorization);\n      }\n\n      return config;\n    });\n  }\n\n  getLoggedInUsersNameFirstLast() {\n    return axios.get(`${url}/users/name`);\n  } // registerFirstAndLastName(name) {\n  //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, name)\n  // }\n  // getLoggedInUsersNameFirstLastFromStored() {\n  //     let user = sessionStorage.getItem(USER_FIRST_AND_LAST_SESSION_ATTIRBUTE)\n  //     if (user === null) return ''\n  //     return user\n  // }\n\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/garrettchristian/DocumentsDesktop/csSeniorYear/isTHEA/budget_estimate_front_end/src/service/AuthenticationService.jsx"],"names":["axios","config","url","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","getJwt","data","get","setJwt","token","creatAccount","newAccount","console","log","post","executeJwtAuthenticationService","username","password","registerSuccessfulLoginForJwt","sessionStorage","setItem","createJWTToken","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","res","cookie","httpOnly","json","interceptors","request","use","headers","authorization","getLoggedInUsersNameFirstLast"],"mappings":"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","sourcesContent":["// AuthenticationService.jsx\n// following https://www.springboottutorial.com/spring-boot-react-full-stack-with-spring-security-basic-and-jwt-authentication\nimport axios from 'axios'\nimport { config } from './Constants'\n\nvar url = config.url.API_URL\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n// export const USER_FIRST_AND_LAST_SESSION_ATTIRBUTE = 'user'\n\nclass AuthenticationService {\n\n    creatAccount(newAccount) {\n        console.log(\"create account\")\n        return axios.post(`${url}/new/user`, newAccount)\n    }\n\n    executeJwtAuthenticationService(username, password) {\n        console.log(username);\n        return axios.post(`${url}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        console.log(this.createJWTToken(token))\n        this.setupAxiosInterceptors(username, this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        console.log(\"here?? \", user)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(username, token) {\n        // const token = jsonwebtoken.sign({ user: username }, jwttoken);\n        res.cookie('token', token, { httpOnly: true });\n        res.json({ token });\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                    console.log(config.headers.authorization)\n                }\n                return config\n            }\n        )\n    }\n\n    getJwt = async () => {\n        const { data } = await axios.get(`/jwt`);\n        setJwt(data.token);\n    }\n\n    getLoggedInUsersNameFirstLast() {\n        return axios.get(`${url}/users/name`, )\n    }\n\n    // registerFirstAndLastName(name) {\n    //     sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, name)\n    // }\n\n    // getLoggedInUsersNameFirstLastFromStored() {\n    //     let user = sessionStorage.getItem(USER_FIRST_AND_LAST_SESSION_ATTIRBUTE)\n    //     if (user === null) return ''\n    //     return user\n    // }\n\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}